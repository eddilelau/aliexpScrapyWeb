#coding=utf-8
import os
import django
os.environ.setdefault("DJANGO_SETTINGS_MODULE", "aliData.settings")# project_name 项目名称
# print(django.VERSION)
django.setup()
import asyncio
import aiohttp
import requests
import json
import time
import re
import datetime
import smtplib
from email.mime.text import MIMEText
from email.mime.multipart import MIMEMultipart
from email.utils import formataddr
from email.header import Header
from scrapy.selector import Selector
from blog.models import *
from  requests import *
import random
# import uvloop    # can use in uvloop
import pymysql


def getRandomAgent():
    USER_AGENTS = [
     "Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.1; SV1; AcooBrowser; .NET CLR 1.1.4322; .NET CLR 2.0.50727)",
     "Mozilla/4.0 (compatible; MSIE 7.0; Windows NT 6.0; Acoo Browser; SLCC1; .NET CLR 2.0.50727; Media Center PC 5.0; .NET CLR 3.0.04506)",
     "Mozilla/4.0 (compatible; MSIE 7.0; AOL 9.5; AOLBuild 4337.35; Windows NT 5.1; .NET CLR 1.1.4322; .NET CLR 2.0.50727)",
     "Mozilla/5.0 (Windows; U; MSIE 9.0; Windows NT 9.0; en-US)",
     "Mozilla/5.0 (compatible; MSIE 9.0; Windows NT 6.1; Win64; x64; Trident/5.0; .NET CLR 3.5.30729; .NET CLR 3.0.30729; .NET CLR 2.0.50727; Media Center PC 6.0)",
     "Mozilla/5.0 (compatible; MSIE 8.0; Windows NT 6.0; Trident/4.0; WOW64; Trident/4.0; SLCC2; .NET CLR 2.0.50727; .NET CLR 3.5.30729; .NET CLR 3.0.30729; .NET CLR 1.0.3705; .NET CLR 1.1.4322)",
     "Mozilla/4.0 (compatible; MSIE 7.0b; Windows NT 5.2; .NET CLR 1.1.4322; .NET CLR 2.0.50727; InfoPath.2; .NET CLR 3.0.04506.30)",
     "Mozilla/5.0 (Windows; U; Windows NT 5.1; zh-CN) AppleWebKit/523.15 (KHTML, like Gecko, Safari/419.3) Arora/0.3 (Change: 287 c9dfb30)",
     "Mozilla/5.0 (X11; U; Linux; en-US) AppleWebKit/527+ (KHTML, like Gecko, Safari/419.3) Arora/0.6",
     "Mozilla/5.0 (Windows; U; Windows NT 5.1; en-US; rv:1.8.1.2pre) Gecko/20070215 K-Ninja/2.1.1",
     "Mozilla/5.0 (Windows; U; Windows NT 5.1; zh-CN; rv:1.9) Gecko/20080705 Firefox/3.0 Kapiko/3.0",
     "Mozilla/5.0 (X11; Linux i686; U;) Gecko/20070322 Kazehakase/0.4.5",
     "Mozilla/5.0 (X11; U; Linux i686; en-US; rv:1.9.0.8) Gecko Fedora/1.9.0.8-1.fc10 Kazehakase/0.5.6",
     "Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/535.11 (KHTML, like Gecko) Chrome/17.0.963.56 Safari/535.11",
     "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_7_3) AppleWebKit/535.20 (KHTML, like Gecko) Chrome/19.0.1036.7 Safari/535.20",
     "Opera/9.80 (Macintosh; Intel Mac OS X 10.6.8; U; fr) Presto/2.9.168 Version/11.52",
    ]
    return USER_AGENTS[random.randint(0,9)]



def fetch_content(product_id,retry_num):   #异步函数
    # time.sleep(5)
    try:
        headers = {
            'User-Agent': getRandomAgent(),
        }
        _url ='https://www.aliexpress.com/item/Tendway-Magnetic-Bluetooth-Earphones-Sport-Running-Wireless-Stereo-Earbuds-with-Micro-Microphone-for-Climbing-Running-auriculare/{}.html'.format(product_id)
        # async with aiohttp.ClientSession() as session:   #创建异步请求对象
        #     async with session.get(_url,headers =headers) as response:     #创建异步获取响应对象
        response=requests.get(_url,headers =headers)
        # content = await response.text()    #等待直到获取成功
        content =response.text    #等待直到获取成功

        status  = response.status_code
        # print(product_id,content.encode('utf-8').decode('gbk', 'ignore'))
        if status ==200:
            # await parseContent(product_id,content=content)
            content_gbk=content.encode('utf-8').decode('gbk', 'ignore')
            if re.findall('window.runParams = \{\s*data:(.*?),\s*csrfToken', content_gbk, re.S):
                parseContent(product_id,content=content)
                return None
            else:
                print(content_gbk)
                print("{}产品没返回正确数据:暂停30s".format(product_id))
                return product_id

        elif status ==404:
            # content_gbk=content.encode('utf-8').decode('gbk', 'ignore')
            # print(content_gbk)
            # data_string=re.findall('window.runParams = \{\s*data:(.*?"site":"glo"}}),\s*};', content_gbk, re.S)[0]
            # data_json=json.loads(data_string)
            # print(type(data_json),data_json)
            print("产品ID:{},服务器找不到产品详情".format(product_id))
            return None
    except (requests.exceptions.ConnectionError,requests.exceptions.SSLError,KeyError) as EX:
        retry_num += 1
        if retry_num <=4:
            print(EX)
            # await fetch_content(product_id,retry_num)
            fetch_content(product_id,retry_num)

        else:
            time.sleep(60)
            print(str(product_id) + '服务器没有响应' + '\n')
            # return await None
            return product_id


def parseContent(product_id,content):
    content_gbk=content.encode('utf-8').decode('gbk', 'ignore')
    # print(content_gbk)
    data_string=re.findall('window.runParams = \{\s*data:(.*?),\s*csrfToken', content_gbk, re.S)[0]
    data_json=json.loads(data_string)
    # print(type(data_json),data_string)
    if "formatedActivityPrice" in data_json["priceModule"].keys():
        product_price=data_json["priceModule"]["formatedActivityPrice"]
    else:
        product_price=data_json["priceModule"]["formatedPrice"]
    product_Score=data_json["titleModule"]["feedbackRating"]["averageStar"]
    productReviews=data_json["titleModule"]["feedbackRating"]["totalValidNum"]
    product_order=data_json["titleModule"]["tradeCount"]
    product_tittle=data_json["titleModule"]["subject"]
    product_img=data_json["imageModule"]["imagePathList"][0]

    sel=Selector(text=content_gbk, type="html")
    Home=sel.xpath('//div[@class="breadcrumb"]/span[1]/a/text()').extract()
    allCategories=sel.xpath('//div[@class="breadcrumb"]/span[2]/a/text()').extract()
    product_catalog=sel.xpath('//div[@class="breadcrumb"]/a/text()').extract()

    product_summary={
        'productId': product_id,
        'totalSales': product_order,
        'totalEvaluation': productReviews,
        'date': datetime.date.today(),
        'title': product_tittle,
        'productScore': product_Score.strip(),
        'price': product_price,
        'picUrl': product_img,
        'catalog': product_catalog[0] if len(product_catalog) >= 1 else "",
        'home': Home[0] if len(Home) >= 1 else "",
        'allCategories': allCategories[0] if len(allCategories) >= 1 else "",
        'firstCategory': product_catalog[0] if len(product_catalog) >= 1 else "",
        'secondCategory': product_catalog[1] if len(product_catalog) >= 2 else "",
        'thirdCategory': product_catalog[2] if len(product_catalog) >= 3 else "",
        'fourthCategory': product_catalog[3] if len(product_catalog) >= 4 else "",
        'fifthCategory': product_catalog[4] if len(product_catalog) >= 5 else "",
        'sixthCategory': product_catalog[5] if len(product_catalog) >= 6 else "",
        'seventhCategory': product_catalog[6] if len(product_catalog) >= 7 else "",
        'eigthCategory': product_catalog[7] if len(product_catalog) >= 8 else "",
    }

    print('完成' + str(product_id) + "销售数据爬取!")
    return product_summary


def send_mail(Spend_Time):
    my_sender = '395407702@qq.com'  # 发件人邮箱账号
    my_pass = 'fxtgbvgdvahubgec'  # 发件人邮箱密码
    my_user = '395407702@qq.com'  # 收件人邮箱账号，我这边发送给自己
    ret = True
    try:
        message = MIMEMultipart()
        message['From'] = Header("Python_ali_竞品日销", 'utf-8')
        message['To'] = Header("工作邮箱", 'utf-8')
        subject = '竞品销售数据'+'_'+str(datetime.date.today())
        message['Subject'] = Header(subject, 'utf-8')
        message.attach( MIMEText('竞品销售数据'+'_'+str(datetime.date.today())+'\n Spend Total Time:'+ Spend_Time +'mins', 'plain', 'utf-8'))
        # msg = MIMEText('热销竞品的销售数据', 'plain', 'utf-8')
        # msg['From'] = formataddr(["FromRunoob", my_sender])  # 括号里的对应发件人邮箱昵称、发件人邮箱账号
        # msg['To'] = formataddr(["FK", my_user])  # 括号里的对应收件人邮箱昵称、收件人邮箱账号
        # msg['Subject'] = file_name  # 邮件的主题，也可以说是标题

        # 构造附件1，传送当前目录下的 test.txt 文件
        # att1 = MIMEText(open('./ali_hotsales_history_Data/'+ file_name, 'rb').read(), 'base64', 'utf-8')
        # att1["Content-Type"] = 'application/octet-stream'
        # 这里的filename可以任意写，写什么名字，邮件中显示什么名字
        # att1["Content-Disposition"] = 'attachment; filename='+file_name
        # message.attach(att1)

        server = smtplib.SMTP_SSL("smtp.qq.com", 465)  # 发件人邮箱中的SMTP服务器，端口是25
        server.login(my_sender, my_pass)  # 括号中对应的是发件人邮箱账号、邮箱密码
        server.sendmail(my_sender, [my_user, ], message.as_string())  # 括号中对应的是发件人邮箱账号、收件人邮箱账号、发送邮件
        server.quit()  # 关闭连接
        print('邮件发送成功')
    except Exception as ex:  # 如果 try 中的语句没有执行，则会执行下面的 ret=False
        print(ex)
        ret = False
    return ret

def main():
    # loop = asyncio.get_event_loop()  # 实例循环
    # # loop = uvloop.new_event_loop()      #can not use in windows
    # asyncio.set_event_loop(loop)        #asyncio异步请求
    # tasks = [asyncio.ensure_future(fetch_content(product, retry_num=1)) for product in productIdlist]  #多任务tasks
    # loop.run_until_complete(asyncio.wait(tasks))  #事务循环
    productIdlist=[
        1.00001E+12,
        1.00001E+12,
        32922877224,
        32919308605,
        32955488741,
        32811933607,
        32816375486,
        32956372243,
        32932096101,
        32911877684,
        32955327671,
        32947972170,
        32816029500,
        32820047882,
        32979389494,
        32957672752,
        32835019753,
        32887811148,
        32911129016,
        32947041167,
        32915099519,
        32857581577,
        32895826904,
        32957798970,
        32955825628,
        32878546539,
        32894381822,
        32820090157,
        32655506530,
        32684477744,
        32815525549,
        32919682070,
        32809512549,
        32957363784,
        32948249910,
        32943214455,
        32954743739,
        32997199219,
        32975149664,
        32966627531,
        32954121117,
        33000998475,
        32988977853,
        32970096031,
        33002559348,
        32966978422,
        32970987616,
        32950715000,
        32965947250,
        32964907123,
        32956753493,
        32982649266,
        32957173074,
        32985227564,
        32910563787,
        32983129305,
        32967475646,
        32956202401,
        32947791238,
        32970303437,
        32953735179,
        32974452126,
        32999296248,
        32951572829,
        32977905673,
        32958831842,
        32924050937,
        32949204501,
        32971383574,
        32930424839,
        32973553999,
        32895062088,
        32968558789,
        32919478431,
        33000055523,
        32976506048,
        32999900789,
        32973629909,
        32987628883,
        32978735163,
        33000711835,
        32958905619,
        32928351035,
        32955117178,
        32880744665,
        32999646490,
        33008900702,
        32964539979,
        33004586655,
        32949001254,
        33002013899,
        33007256195,
        32914530125,
        32958255294,
        32965521672,
        32884783944,
        32960743184,
        32964701305,
        32959861025,
        32953710077,
        32979201404,
        33005699280,
        32862143697,
        32965834206,
        32967996034,
        32966507245,
        32975340176,
        32974389966,
        32865350574,
        32968548652,
        32968670618,
        32851850223,
        32971139389,
        32965638154,
        32948308112,
        32966623874,
        32977094030,
        32957177580,
        32957169525,
        32974989918,
        32855214352,
        32969389591,
        32967647980,
        32891873513,
        32970623225,
        33000896196,
        32984755708,
        32967175330,
        32978364011,
        33000487439,
        32802228205,
        32984874980,
        33018791772,
        32963381810,
        32965629453,
        32993425187,
        32995801742,
        32992090646,
        32970701558,
        32951871528,
        32969444395,
        32863841192,
        32977459885,
        32966661365,
        33006015150,
        32974386124,
        32971306449,
        32983305471,
        32967060735,
        32950328217,
        33005471817,
        32893939303,
        32956565975,
        32968142459,
        33006284385,
        32931005654,
        32962883226,
        32970633733,
        32971421089,
        32942434685,
        33000233216,
        33010123233,
        32963366142,
        32983660018,
        32970148494,
        32988045731,
        32980089963,
        32967582488,
        32975645274,
        32969940687,
        32946218130,
        32918302452,
        32965758374,
        32861407801,
        33009811045,
        32989242181,
        32970766430,
        32918529159,
        32998198356,
        32970058608,
        32974464520,
        32918516187,
        32996706741,
        32989298383,
        32956755768,
        33000115439,
        32875946023,
        33003246285,
        32962380220,
        32970882187,
        32963305435,
        32980086390,
        32864254622,
        32972738304,
        32979369586,
        32855328792,
        32917497655,
        32951282508,
        32968064942,
        32977040125,
        32973675656,
        32985466165,
        32784867902,
        32978050801,
        32983418433,
        32917642484,
        32970059194,
        32972706957,
        32953009705,
        32980501261,
        32964408880,
        32962437822,
        32970413016,
        32960680856,
        32996527344,
        32805091283,
        33002448672,
        32977211298,
        32949494823,
        32980814707,
        32946002057,
        32998776616,
        32959221734,
        32960637394,
        1.00001E+12,
        32963609855,
        33009737609,
        32933614620,
        32845880100,
        33011207931,
        32989781556,
        32990467594,
        32522788024,
        33011444789,
        33004096972,
        32933035672,
        32911443990,
        32975445811,
        32995008971,
        32989753995,
        32999737653,
        32989591209,
        32970047910,
        33015646344,
        33017810953,
        32996794754,
        32999670840,
        32839275616,
        32920542429,
        32919985667,
        32842963262,
        33006954869,
        32869014713,
        33010948514,
        32832290043,
        32997894948,
        32977288059,
        32990781447,
        32914676552,
        33008844718,
        32985395034,
        32984099291,
        32949165805,
        33006532695,
        33004992291,
        32995999915,
        32857700100,
        32925751225,
        32968414809,
        32991172268,
        32920019231,
        33020698743,
        32919155496,
        32948642096,
        32820185996,
        32904191885,
        32932151355,
        32962124542,
        32966040263,
        32965992179,
        33021805402,
        32960263069,
        32980485927,
        32985607216,
        32977809128,
        32878708744,
        32988006857,
        32965467076,
        33018724914,
        33019427893,
        32983293075,
        32960006857,
        32983267306,
        32960206856,
        32900900139,
        32960683267,
        32978167335,
        32822905366,
        33019886288,
        32975338969,
        32951294435,
        1.00001E+12,
        33012035105,
        32926454600,
        32984019175,
        33007531324,
        33010869217,
        33001361744,
        32968664505,
        32984591486,
        32957238682,
        32898237804,
        32918021060,
        32996314296,
        32991581078,
        33000993707,
        33011535887,
        32953044072,
        32966957041,
        32986303169,
        33001225888,
        32988608089,
        33014928441,
        33020243886,
        32961464126,
        33014018715,
        32980617398,
        32846168950,
        33018491176,
        32838036386,
        32835007804,
        33008019275,
        32887602632,
        33012101487,
        33003969928,
        32770103784,
        32962411331,
        32991869615,
        33019171496,
        32791035424,
        32965351247,
        33005744139,
        33017183400,
        33002493262,
        32956893551,
        32915201982,
        32973246105,
        32981241622,
        32975512142,
        32997114137,
        32960645329,
        32986211829,
        32967094275,
        32959224157,
        32993078918,
        33001285906,
        32967007091,
        32998156678,
        33004676362,
        32968646473,
        33008568088,
        32853385786,
        33018314246,
        32934703108,
        33011692709,
        33016078079,
        33018443086,
        32814452519,
        33020153138,
        32954242779,
        32839919612,
        32817164732,
        32964518992,
        32966415184,
        32955096863,
        32963720133,
        32876273038,
        32989515400,
        32971147106,
        32657394755,
        32995662052,
        32994681112,
        32990838245,
        32856620615,
        32962635850,
        33021132377,
        32974464130,
        32972451780,
        32867608857,
        32669590025,
        32954437537,
        32663856389,
        32998135373,
        32973487830,
        32939510593,
        32982179649,
        32976951201,
        32949218007,
        33003553325,
        32952692648,
        32997369424,
        32961919954,
        32992245984,
        32844765677,
        32790311253,
        32963656574,
        32981217458,
        32982431686,
        32735065162,
        32953067218,
        32726515444,
        32964147739,
        32962431047,
        32989990076,
        32933047089,
        32966395462,
        32979361595,
        32988998342,
        32960174799,
        32970011005,
        32919785765,
        32980090169,
        32973174791,
        32960335499,
        32941744885,
        32860503865,
        32975440857,
        32964958759,
        32980045221,
        32974438633,
        32959200530,
        32925823855,
        32958783695,
        32955700629,
        32982494988,
        32947477556,
        32846249551,
        32978058669,
        32981378482,
        32971110513,
        32920837951,
        32965108362,
        32979437166,
        32970299355,
        32955332838,
        32958314250,
        32989568490,
        32950445171,
        32970589225,
        32983161029,
        32952772535,
        32963258925,
        32974466028,
        32977819930,
        32948585239,
        32969051583,
        32903537934,
        32979772601,
        32707771948,
        32967653877,
        32991563567,
        32920596539,
        32954903025,
        32952369216,
        33007497309,
        32983575368,
        33013814635,
        32953562337,
        33002872416,
        1.00001E+12,
        33016603930,
        32797141803,
        32905506472,
        32972577252,
        32993186823,
        32954935366,
        32968560860,
        33010672940,
        32993344571,
        32973069928,
        32990593755,
        32958852491,
        32877174717,
        32974826110,
        32971482582,
        32950378315,
        32918067020,
        32960980000,
        32967031585,
        33003995872,
        33019939153,
        32994323306,
        32957188161,
        32960165417,
        32993707805,
        32999247168,
        32985756160,
        33004137486,
        32966820408,
        32967704836,
        33007338519,
        32763468254,
        32885680549,
        32982507066,
        33002545523,
        32921619100,
        33004435227,
        32967126917,
        33011180990,
        32854268965,
        33010684820,
        32954191079,
        33020215345,
        33006271385,
        32994376189,
        32978523722,
        32668616091,
        32297450489,
        32964441895,
        33000404379,
        33004539090,
        32982272157,
        33012844228,
        32960105230,
        32914119249,
        33011782266,
        32940615775,
        32983391840,
        32999162353,
        32897822119,
        32947957389,
        32986515270,
        32933746869,
        33007174916,
        33005961676,
        33013314384,
        32866957917,
        32998315145,
        33025359227,
        33016571299,
        32872447184,
        32971407554,
        32966629353,
        32999128671,
        32997887074,
        33016835358,
        32954303163,
        33023464637,
        32869018727,
        33012750312,
        33007676883,
        32866541775,
        32979778161,
        33023022497,
        32993489453,
        32686785554,
        32916024348,
        32856905490,
        33033126309,
        32966423344,
        32944601772,
        32997815114,
        33013168835,
        32852366953,
        32997268918,
        32967976074,
        33014866769,
        32952714552,
        32996676464,
        33012844233,
        33026373557,
        33010423320,
        32989152949,
        32961318363,
        32967056783,
        32971757124,
        32991865715,
        32920990974,
        32989817685,
        32891059122,
        32984591744,
        32950581244,
        32999191604,
        32971046858,
        32956617383,
        32965738170,
        32962339407,
        32996352292,
        32990038153,
        32980009801,
        32976262381,
        32983051296,
        32963201883,
        33014036927,
        33007813737,
        32925584379,
        32984094761,
        32882861083,
        1.00001E+12,
        32956590179,
        32956103016,
        32964325190,
        32961752601,
        32969266186,
        32942875604,
        32883974035,
        32967611330,
        32880559763,
        32960084695,
        32919428388,
        32945292005,
        33015435197,
        32952136348,
        32848550633,
        32919317088,
        32895719817,
        32961518982,
        32949650620,
        32854595384,
        32858550493,
        32944586771,
        32957021675,
        32963809024,
        32920564627,
        32975517257,
        32983091234,
        32959634687,
        32963207220,
        32974828610,
        32946719184,
        32972131264,
        32952171625,
        32940014433,
        32859791716,
        32961957747,
        32947939190,
        32818790880,
        32965487092,
        32953696932,
        32966839541,
        32971278106,
        32919131617,
        32991184603,
        32955855689,
        32948241656,
        32872847877,
        32888688482,
        32949751692,
        32967651797,
        32955736807,
        32964680386,
        32955476554,
        32964598548,
        32888929646,
        32960100993,
        32980172122,
        32871362940,
        32966451205,
        32963244091,
        32772422277,
        32966161919,
        32958456839,
        32972299044,
        32893770830,
        32965666774,
        32965500440,
        32951998766,
        32966891939,
        32964618646,
        32950869877,
        32957714846,
        32860003087,
        32924158796,
        32924287663,
        32965925604,
        32964863267,
        32989791804,
        32830129548,
        33004746813,
        33008963620,
        32959064801,
        32984184874,
        32952717407,
        32967209607,
        32957068984,
        32992896434,
        32972617718,
        32922843599,
        32972162135,
        32972513421,
        33006914478,
        32965211625,
        32977108700,
        32877826038,
        33015104059,
        33014774526,
        32975104690,
        32947474940,
        32945312468,
        32978879601,
        32964328009,
        32646759564,
        32989752717,
        32791147226,
        32982097926,
        32969737536,
        32967039754,
        32949586233,
        32966030958,
        32972829229,
        32980954296,
        32961513072,
        32856341711,
        32977214301,
        32986621787,
        32946000736,
        32968614829,
        32921192636,
        32967865015,
        32966543361,
        1.00001E+12,
        32987742356,
        32891356358,
        32971447179,
        32908281538,
        32891187267,
        32971163591,
        32985243771,
        32955573981,
        32982556131,
        32991648194,
        32965039863,
        32995822208,
        32970436880,
        33007986020,
        32980094291,
        33023078634,
        32974677050,
        32995475769,
        32976856887,
        32967714656,
        32988731222,
        32949654141,
        32848054057,
        32976956030,
        33012569206,
        32925767078,
        32961593124,
        32982490791,
        32962636314,
        32971655209,
        32817326598,
        32950162914,
        32991262679,
        32960820116,
        32956937197,
        32964102144,
        32994470084,
        32985915082,
        32962729476,
        32922915271,
        32965678100,
        32960830443,
        32991801176,
        32597418263,
        32913803495,
        32955173052,
        32965595600,
        32978705709,
        32974887338,
        32981149905,
        32970277639,
        32883107861,
        32910709115,
        32964488241,
        32967627871,
        32951294463,
        32979883174,
        32965955857,
        32987804832,
        32970871623,
        32912807588,
        32948566658,
        32964376124,
        32489782530,
        32952183906,
        32903424863,
        32970953687,
        32834380573,
        32820609172,
        32601027783,
        32859499485,
        32968595367,
        32966209861,
        32992701249,
        32994298952,
        33003687906,
        33010406526,
        32947740448,
        32374671532,
        1.00001E+12,
        32957754424,
        33007306986,
        32957070467,
        33021973204,
        32965395807,
        32974157339,
        33005643504,
        32988560675,
        33003907781,
        32978257432,
        33009008041,
        32998463738,
        32965102395,
        32997199887,
        32989334355,
        33016830212,
        32990120625,
        32920915514,
        32956542469,
        32968111773,
        32982685791,
        32962937701,
        32975511800,
        32991006922,
        32833352227,
        32960087839,
        33007514951,
        33002926127,
        32994156374,
        32825050039,
        32953320909,
        33007001635,
        32871523691,
        32971335091,
        32857670239,
        32956977486,
        32866547894,
        32996093332,
        32889688309,
        32979425922,
        32817158452,
        32991581636,
        32968891159,
        32897649783,
        32956935046,
        32973327188,
        33001346975,
        32957252568,
        33009712164,
        33002538687,
        32998174602,
        33002422389,
        32981047462,
        33002162409,
        32966991761,
        32985738075,
        32770234261,
        32988718904,
        32957562299,
        32923045386,
        32895921650,
        32815162030,
        32846908769,
        32966940818,
        32960715560,
        32963441176,
        32889011052,
        32960337854,
        32719573342,
        32978492642,
        32992270954,
        32992282808,
        32905356099,
        32975996534,
        32995138716,
        32986968362,
        33025719890,
        32958942428,
        32957743229,
        32889155816,
        32964995447,
        32856698540,
        32983180470,
        32982512878,
        32908872145,
        32957888295,
        32987434953,
        32988718306,
        32955946814,
        32986941628,
        32969583894,
        32978399375,
        32988048304,
        32969157117,
        32996787910,
        32991583795,
        32971438578,
        32903353438,
        33008289999,
        32997711365,
        32990667602,
        32961789503,
        32980746907,
        32974432870,
        32980480961,
        32980589649,
        32915096461,
        32967447109,
        32964405641,
        32961614333,
        32992506665,
        32969601335,
        32853413198,
        32999998787,
        32897627460,
        32981657944,
        32984251365,
        32961828215,
        32693783204,
        32998185953,
        32978831095,
        32953589214,
        32850519329,
        32967843881,
        32976834934,
        33003304487,
        33004552296,
        33015553924,
        32993234406,
        33019337538,
        32921117350,
        33005723867,
        33034230301,
        32993122231,
        32966983553,
        32983204707,
        32996885392,
        32977519115,
        32960208252,
        32879909221,
        32990295349,
        32962186526,
        32964861271,
        32966871522,
        32767557752,
        32944894714,
        32959025039,
        32993953072,
        32969218993,
        32986528130,
        32837110591,
        32985455299,
        32968155325,
        32949647720,
        32978291841,
        32964658252,
        32844466753,
        32976943946,
        32898539752,
        32986096251,
        32814980460,
        32891788917,
        32986901239,
        32862014486,
        32779922874,
        32977665304,
        32970438932,
        32984039602,
        32862181236,
        33002317360,
        32998183922,
        32983943090,
        32915088306,
        32955550861,
        32950489567,
        33012205625,
        32967607256,
        32811372796,
        32955966760,
        32985561316,
        32983430791,
        32974984609,
        32974045731,
        33013788646,
        32947070438,
        32754899078,
        32911708053,
        32968223997,
        32835181450,
        32885917739,
        32846680224,
        32888991555,
        32915368014,
        32970374787,
        32963946617,
        32924226278,
        32960409596,
        32978488092,
        32953408659,
        32877511227,
        32893008888,
        32988819183,
        32962171876,
        32968991152,
        32814702562,
        32969830717,
        32837282576,
        32949778246,
        32969263870,
        32983237751,
        32893759487,
        32949847519,
        32957382772,
        32984562509,
        32975810674,
        32974717563,
        32997263063,
        32966420679,
        32964512429,
        32964146740,
        32983571512,
        32969303206,
        32992636868,
        32964092136,
        32972918748,
        32979255510,
        32978424356,
        32976553008,
        32958548395,
        32971334694,
        32983606313,
        32950225906,
        32991684894,
        33007455124,
        32995549074,
        32981806399,
        33016910427,
        32964282421,
        32987414965,
        32969387155,
        32973698016,
        32964838168,
        33026167700,
        33021641087,
        33020243779,
        33000097592,
        32968210686,
        32842841909,
        33022052251,
        32958960035,
        32967831536,
        32987363947,
        32956698063,
        33024866184,
        32988173149,
        32998493513,
        32990420679,
        33035599824,
        33012730545,
        33002538655,
        32993612260,
        33000684770,
        33013511987,
        32974385612,
        33030313114,
        32982905870,
        33018694078,
        32962832936,
        32980325790,
        33026245539,
        32996218911,
        32962665281,
        32964765376,
        32979412420,
        32946904605,
        32900585895,
        32858636361,
        32916208786,
        32907887725,
        32951336941,
        33024867618,
        32981309977,
        33012248420,
        32983575618,
        33012225926,
        32962368385,
        32834253256,
        32968528447,
        32984963227,
        32916160510,
        32958321932,
        32975501730,
        32975823800,
        32979299295,
        32914248580,
        32919319457,
        32990566591,
        32965324779,
        32947197136,
        32974034851,
        32985250647,
        32998351444,
        32980830036,
        32974934720,
        33019183943,
        32893052348,
        33030600948,
        33001142806,
        32996404137,
        33025698340,
        33002363816,
        32964373386,
        33013469698,
        32777732234,
        33028455474,
        33010799274,
        32990589863,
        33014258613,
        32914348996,
        32840700392,
        32868332841,
        32854704102,
        32956691409,
        32805899897,
        32845459200,
        32826913510,
        32891181230,
        32888445475,
        32887674808,
        32946005763,
        32814411517,
        1717051858,
        32964752077,
        32979975057,
        32992638007,
        32971118525,
        32977111096,
        32923756512,
        32851667110,
        32802275762,
        32990528248,
        32950118549,
        32953862949,
        32903688473,
        33024853756,
        32913395246,
        32982218027,
        32995535053,
        32948923029,
        32969811259,
        32898708481,
        32963538415,
        32984390856,
        32863585061,
        32843095321,
        32993503974,
        33002039839,
        32947824304,
        32944997602,
        32984862022,
        33015119847,
        32981647464,
        33022958106,
        32975764510,
        32908161029,
        32966674143,
        1576637693,
        32972238946,
        32958583046,
        33028884886,
        33027444290,
        33013975172,
        32988671221,
        32912546151,
        32982626651,
        32959148629,
        32848976685,
        32964436672,
        32999786502,
        33033310931,
        32965188083,
        32952619605,
        32980082706,
        32920088148,
        33006639607,
        32945203816,
        33012838167,
        32909448642,
        33032586302,
        32979355355,
        32990599105,
        32984195689,
        32821702629,
        32993321537,
        32949043327,
        33004531679,
        32971324886,
        33012066202,
        32902659786,
        33030575886,
        32973340509,
        32969234667,
        32964553444,
        32787679480,
        32907023115,
        32961041577,
        32967681196,
        32975260296,
        32997655278,
        32820409010,
        33014816061,
        33023036861,
        32970198703,
        32956825426,
        32995710604,
        33012127074,
        33003389492,
        32864146828,
        32954009064,
        32983738620,
        33004526309,
        32852864819,
        33009050887,
        32901645035,
        32885998771,
        33009040098,
        32997085843,
        32971766427,
        32920383389,
        33026531129,
        32891418758,
        33019450997,
        32902058658,
        32783019136,
        33022441488,
        33026908967,
        32997217063,
        33025776273,
        32986632392,
        33016666395,
        33013873211,
        32855657611,
        32915041197,
        32996727559,
        32890613824,
        33010234119,
        32971219130,
        33001957782,
        33003822209,
        33016923802,
        32955585679,
        32953196507,
        33026895637,
        33033839731,
        1.00001E+12,
        33025670799,
        33014839440,
        32970234871,
        32982207038,
        32922853761,
        33016680485,
        32975649252,
        32993289979,
        32996997716,
        33032546137,
        32853082939,
        33027004444,
        32961539106,
        33025811646,
        32976430478,
        33025865956,
        32823576052,
        32953912241,
        32890617072,
        33010531668,
        32986629478,
        33013632792,
        33029631741,
        33032365474,
        33010000435,
        33022300699,
        33029575205,
        33011810132,
        33026694740,
        32855609828,
        33019534724,
        33030043583,
        32950927381,
        32971572971,
        32992310444,
        32994811520,
        32827813386,
        32905143409,
        33033210043,
        33013344391,
        32944872055,
        33017363722,
        32979320960,
        33032270657,
        33009925570,
        33031435650,
        33024699108,
        32983541105,
        33030904402,
        33033530620,
        33000647746,
        33017709977,
        33028553736,
        33031376738,
        33010491451,
        33032569213,
        32910420163,
        33027637218,
        32981165355,
        32968447342,
        32974868735,
        33024351566,
        32967439288,
        32872997568,
        32952596981,
        32968995666,
        32951850117,
        32959989038,
        32953049535,
        32967613694,
        32919299377,
        32985489205,
        33002827116,
        33026265054,
        32958164272,
        32962208573,
        32970215161,
        32981327324,
        33025950730,
        32983395458,
        33028559786,
        32968962076,
        32990932061,
        32859183786,
        33002975443,
        32991839317,
        33022828521,
        32971467526,
        33034595500,
        32915384863,
        32987288826,
        32963441143,
        33005988052,
        33012418310,
        32989463989,
        33007263253,
        32986080386,
        32997373184,
        1.00001E+12,
        32944905535,
        33027611073,
        33016587492,
        33027140995,
        32920008773,
        33029111129,
        32995923985,
        33010726189,
        32980069695,
        32976190454,
        33019906140,
        32986299486,
        33024630418,
        33020816976,
        32978175351,
        32987292377,
        33003674895,
        32976052009,
        32998173959,
        33002086641,
        32980128252,
        32977863217,
        32992254581,
        33008448984,
        32980210433,
        33007374038,
        32993293254,
        32988505544,
        33004682295,
        33002363641,
        32912706087,
        32834356403,
        33021020242,
        1.00001E+12,
        32985350252,
        33035031071,
        33016542686,
        33030489481,
        33019439850,
        32986937265,
        33009142645,
        33000815099,
        33001896712,
        32999992493,
        32917005971,
        33004237572,
        33021609950,
        33035315396,
        32993421583,
        33016739298,
        33030420913,
        33024273395,
        33013414720,
        32976075304,
        32872203775,
        33019661909,
        32924230313,
        32976992011,
        32987394974,
        32807091653,
    ]

    while productIdlist:
        productId=productIdlist.pop()
        print("开始爬虫{}".format(productId),"等待爬虫产品数据为{}".format(len(productIdlist)))
        response_content=fetch_content(productId, retry_num=1)
        if response_content:
            productIdlist.append(response_content)
            print("产品{}爬虫失败,返回消息列表".format(productId), "等待爬虫产品数据为{}".format(len(productIdlist)))
            time.sleep(10*random.randint(1,6))


if __name__ == '__main__':
    Start_Time = time.time()
    # productIdlist = competingProductInfo.objects.all()   # 数据库读取产品ID

    main()
    # groupNum = 50  #分组数
    # m = int(len(productIdlist)/groupNum) #求分组数
    # n = len(productIdlist)%groupNum      #求余
    # if n>0:
    #     m +=1
    # for number in range(m):
    #     main(productIdlist[number*groupNum:(number+1) * groupNum])
    # End_Time = time.time()
    # Spend_Time = str(round((End_Time - Start_Time) / 60, 2))
    # print('结束')
    # send_mail(Spend_Time)