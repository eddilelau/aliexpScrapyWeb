import os
import django
os.environ.setdefault("DJANGO_SETTINGS_MODULE", "aliData.settings")# project_name 项目名称
print(django.VERSION)
django.setup()
import asyncio
import aiohttp
import requests
# from bs4 import BeautifulSoup
import time
import re
import datetime
import smtplib
from email.mime.text import MIMEText
from email.mime.multipart import MIMEMultipart
from email.utils import formataddr
from email.header import Header
from scrapy.selector import Selector
from blog.models import *
from  requests import *
import random
# import uvloop
import pymysql
import json


def getRandomAgent():
    USER_AGENTS = [
     "Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.1; SV1; AcooBrowser; .NET CLR 1.1.4322; .NET CLR 2.0.50727)",
     "Mozilla/4.0 (compatible; MSIE 7.0; Windows NT 6.0; Acoo Browser; SLCC1; .NET CLR 2.0.50727; Media Center PC 5.0; .NET CLR 3.0.04506)",
     "Mozilla/4.0 (compatible; MSIE 7.0; AOL 9.5; AOLBuild 4337.35; Windows NT 5.1; .NET CLR 1.1.4322; .NET CLR 2.0.50727)",
     "Mozilla/5.0 (Windows; U; MSIE 9.0; Windows NT 9.0; en-US)",
     "Mozilla/5.0 (compatible; MSIE 9.0; Windows NT 6.1; Win64; x64; Trident/5.0; .NET CLR 3.5.30729; .NET CLR 3.0.30729; .NET CLR 2.0.50727; Media Center PC 6.0)",
     "Mozilla/5.0 (compatible; MSIE 8.0; Windows NT 6.0; Trident/4.0; WOW64; Trident/4.0; SLCC2; .NET CLR 2.0.50727; .NET CLR 3.5.30729; .NET CLR 3.0.30729; .NET CLR 1.0.3705; .NET CLR 1.1.4322)",
     "Mozilla/4.0 (compatible; MSIE 7.0b; Windows NT 5.2; .NET CLR 1.1.4322; .NET CLR 2.0.50727; InfoPath.2; .NET CLR 3.0.04506.30)",
     "Mozilla/5.0 (Windows; U; Windows NT 5.1; zh-CN) AppleWebKit/523.15 (KHTML, like Gecko, Safari/419.3) Arora/0.3 (Change: 287 c9dfb30)",
     "Mozilla/5.0 (X11; U; Linux; en-US) AppleWebKit/527+ (KHTML, like Gecko, Safari/419.3) Arora/0.6",
     "Mozilla/5.0 (Windows; U; Windows NT 5.1; en-US; rv:1.8.1.2pre) Gecko/20070215 K-Ninja/2.1.1",
     "Mozilla/5.0 (Windows; U; Windows NT 5.1; zh-CN; rv:1.9) Gecko/20080705 Firefox/3.0 Kapiko/3.0",
     "Mozilla/5.0 (X11; Linux i686; U;) Gecko/20070322 Kazehakase/0.4.5",
     "Mozilla/5.0 (X11; U; Linux i686; en-US; rv:1.9.0.8) Gecko Fedora/1.9.0.8-1.fc10 Kazehakase/0.5.6",
     "Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/535.11 (KHTML, like Gecko) Chrome/17.0.963.56 Safari/535.11",
     "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_7_3) AppleWebKit/535.20 (KHTML, like Gecko) Chrome/19.0.1036.7 Safari/535.20",
     "Opera/9.80 (Macintosh; Intel Mac OS X 10.6.8; U; fr) Presto/2.9.168 Version/11.52",
    ]
    return USER_AGENTS[random.randint(0,9)]

def getSession():
    session=requests.Session()  # 创建session对象s
    session.get('https://www.aliexpress.com/')  # 获取cookies，并存储于s对象中
    headers={
        'User-Agent': getRandomAgent(),
    }
    session.headers.update(headers)
    return session

def download_image(url,file_path):
    headers = {
        'User-Agent': getRandomAgent(),
    }
    try:
        if not os.path.exists(file_path):
            response=requests.get(url, headers=headers)
            if response.status_code == 200:
                with open(file_path, 'wb') as f:
                    f.write(response.content)
                    f.close()
                    print('下载图片{}'.format(url))

    except RequestException:
        print('请求图片错误', url)
        pass

def fetch_content(product_id,retry_num,session):   #异步函数
    try:
        _url ='https://www.aliexpress.com/item/Tendway-Magnetic-Bluetooth-Earphones-Sport-Running-Wireless-Stereo-Earbuds-with-Micro-Microphone-for-Climbing-Running-auriculare/{}.html'.format(product_id)
        response=session.get(_url)
        content =response.text    #等待直到获取成功
        status  = response.status_code
        # print(status,content.encode('utf-8').decode('gbk', 'ignore'))
        if status == 200:
            # await parseContent(product_id,content=content)
            content_gbk=content.encode('utf-8').decode('gbk', 'ignore')
            if re.findall('window.runParams = \{\s*data:(.*?),\s*csrfToken', content_gbk, re.S):
                product_summary=parseContent(product_id, content=content)
                if product_summary != None:
                    saveTomysql(product_summary)
                    download_image(product_summary['picUrl'], './static/' + str(product_id) + '.jpg')
            else:
                print(content_gbk)
                print("{}产品没返回正确数据:暂停30s".format(product_id))
                return product_id
        elif status ==404:
            print("产品ID:{},服务器找不到产品详情,重试{}".format(product_id,retry_num))
            retry_num+=1
            if retry_num <= 4:
                fetch_content(product_id, retry_num,session)
            else:
                addToinfringeProductinfo(product_id)
                return None
    except (requests.exceptions.ConnectionError,requests.exceptions.SSLError,KeyError) as EX:
        retry_num += 1
        if retry_num <=4:
            print(EX)
            fetch_content(product_id,retry_num,session)
        else:
            time.sleep(60*10)
            print(str(product_id) + '服务器没有响应' + '\n')
            return product_id

def saveTomysql(product_summary):
    competingProductDailySales.objects.update_or_create(
        productId=product_summary['productId'],
        title=product_summary['title'],
        totalSales=product_summary['totalSales'],
        totalEvaluation=product_summary['totalEvaluation'],
        productScore=product_summary['productScore'],
        price=product_summary['price'],
        picUrl=product_summary['picUrl'],
        date=product_summary['date'],
        home=product_summary['home'],
        allCategories=product_summary['allCategories'],
        firstCategory=product_summary['firstCategory'],
        secondCategory=product_summary['secondCategory'],
        thirdCategory=product_summary['thirdCategory'],
        fourthCategory=product_summary['fourthCategory'],
        fifthCategory=product_summary['fifthCategory'],
        sixthCategory=product_summary['sixthCategory'],
        seventhCategory=product_summary['seventhCategory'],
        eigthCategory=product_summary['eigthCategory'],
    )

    date=(product_summary['date'])
    past1_date=date + datetime.timedelta(days=-1)
    past2_date=date + datetime.timedelta(days=-2)
    past3_date=date + datetime.timedelta(days=-3)
    past4_date=date + datetime.timedelta(days=-4)
    past1_date_data_exist=competingProductDailySales.objects.filter(date=past1_date,productId=product_summary['productId']).count()
    past2_date_data_exist=competingProductDailySales.objects.filter(date=past2_date,productId=product_summary['productId']).count()
    past3_date_data_exist=competingProductDailySales.objects.filter(date=past3_date,productId=product_summary['productId']).count()
    past4_date_data_exist=competingProductDailySales.objects.filter(date=past4_date,productId=product_summary['productId']).count()
    print(past1_date_data_exist and past4_date_data_exist and past2_date_data_exist and past3_date_data_exist)
    if past1_date_data_exist and past4_date_data_exist and past2_date_data_exist and past3_date_data_exist:
        # calculate pastX_Sales
        past1_date_totalsales=competingProductDailySales.objects.filter(date=past1_date, productId=product_summary[ 'productId']).values_list('totalSales', flat=True)
        past2_date_totalsales=competingProductDailySales.objects.filter(date=past2_date, productId=product_summary[ 'productId']).values_list('totalSales', flat=True)
        past3_date_totalsales=competingProductDailySales.objects.filter(date=past3_date, productId=product_summary[ 'productId']).values_list('totalSales', flat=True)
        past4_date_totalsales=competingProductDailySales.objects.filter(date=past4_date, productId=product_summary['productId']).values_list('totalSales', flat=True)
        past1_Sales=int(product_summary['totalSales']) - past1_date_totalsales[0]
        past2_Sales=int(product_summary['totalSales']) - past2_date_totalsales[0]
        past3_Sales=int(product_summary['totalSales']) - past3_date_totalsales[0]
        past4_Sales=int(product_summary['totalSales']) - past4_date_totalsales[0]

        competingProductDailySalesforFiveDays.objects.update_or_create(
            productId=product_summary['productId'],
            title=product_summary['title'],
            totalSales=product_summary['totalSales'],
            totalEvaluation=product_summary['totalEvaluation'],
            productScore=product_summary['productScore'],
            price=product_summary['price'],
            picUrl=product_summary['picUrl'],
            date=product_summary['date'],
            past1_Sales=past1_Sales,
            past2_Sales=past2_Sales,
            past3_Sales=past3_Sales,
            past4_Sales=past4_Sales,
            home=product_summary['home'],
            allCategories=product_summary['allCategories'],
            firstCategory=product_summary['firstCategory'],
            secondCategory=product_summary['secondCategory'],
            thirdCategory=product_summary['thirdCategory'],
            fourthCategory=product_summary['fourthCategory'],
            fifthCategory=product_summary['fifthCategory'],
            sixthCategory=product_summary['sixthCategory'],
            seventhCategory=product_summary['seventhCategory'],
            eigthCategory=product_summary['eigthCategory']
        )

        if past4_Sales<5 and competingProductInfo.objects.filter(productId =product_summary['productId']).values_list('tag', flat=True)[0] ==None:
            competingProductInfo.objects.filter(productId =product_summary['productId']).delete()

def addToinfringeProductinfo(product_id):
    # variable
    infringeProductNum=infringeProductinfo.objects.filter(productId=product_id).exists()
    productInfoNum=competingProductDailySales.objects.filter(productId=product_id).exists()

    # logic
    if productInfoNum:
        productData=competingProductDailySales.objects.filter(productId=product_id).order_by('-date')[0]
        if infringeProductNum:
            infringeProductData=infringeProductinfo.objects.filter(productId=product_id)[0]
            if infringeProductData.updateDate == datetime.date.today() - datetime.timedelta(days=1):
                if infringeProductData.confirm_times >= 2:
                    infringeProductinfo.objects.filter(productId=product_id).update(
                        totalSales=productData.totalSales,
                        totalEvaluation=productData.totalEvaluation,
                        productScore=productData.productScore,
                        price=productData.price,
                        been_deleted=1,
                        confirm_times=3,
                        updateDate=datetime.date.today())
                    competingProductDailySales.objects.filter(productId=product_id).delete()
                else:
                    infringeProductinfo.objects.filter(productId=product_id).update(
                        totalSales=productData.totalSales,
                        totalEvaluation=productData.totalEvaluation,
                        productScore=productData.productScore,
                        price=productData.price,
                        been_deleted=0,
                        confirm_times=2,
                        updateDate=datetime.date.today())
            else:
                infringeProductinfo.objects.filter(productId=product_id).update(
                    totalSales=productData.totalSales,
                    totalEvaluation=productData.totalEvaluation,
                    productScore=productData.productScore,
                    price=productData.price,
                    been_deleted=0,
                    confirm_times=1,
                    updateDate=datetime.date.today())
        else:
            infringeProductinfo.objects.update_or_create(
                productId=product_id,
                totalSales=productData.totalSales,
                totalEvaluation=productData.totalEvaluation,
                productScore=productData.productScore,
                price=productData.price,
                been_deleted=0,
                confirm_times=1,
                updateDate=datetime.date.today())
    else:
        competingProductDailySales.objects.filter(productId=product_id).delete()

def parseContent(product_id,content):
    content_gbk=content.encode('utf-8').decode('gbk', 'ignore')
    # print(content_gbk)
    data_string=re.findall('window.runParams = \{\s*data:(.*?),\s*csrfToken', content_gbk, re.S)[0]
    data_json=json.loads(data_string)
    # print(type(data_json),data_string)
    if "formatedActivityPrice" in data_json["priceModule"].keys():
        product_price=data_json["priceModule"]["formatedActivityPrice"]
    else:
        product_price=data_json["priceModule"]["formatedPrice"]
    product_Score=data_json["titleModule"]["feedbackRating"]["averageStar"]
    productReviews=data_json["titleModule"]["feedbackRating"]["totalValidNum"]
    product_order=data_json["titleModule"]["tradeCount"]
    product_tittle=data_json["titleModule"]["subject"]
    product_img=data_json["imageModule"]["imagePathList"][0]

    sel=Selector(text=content_gbk, type="html")
    Home=sel.xpath('//div[@class="breadcrumb"]/span[1]/a/text()').extract()
    allCategories=sel.xpath('//div[@class="breadcrumb"]/span[2]/a/text()').extract()
    product_catalog=sel.xpath('//div[@class="breadcrumb"]/a/text()').extract()

    product_summary={
        'productId': product_id,
        'totalSales': product_order,
        'totalEvaluation': productReviews,
        'date': datetime.date.today(),
        'title': product_tittle,
        'productScore': product_Score.strip(),
        'price': product_price,
        'picUrl': product_img,
        'catalog': product_catalog[0] if len(product_catalog) >= 1 else "",
        'home': Home[0] if len(Home) >= 1 else "",
        'allCategories': allCategories[0] if len(allCategories) >= 1 else "",
        'firstCategory': product_catalog[0] if len(product_catalog) >= 1 else "",
        'secondCategory': product_catalog[1] if len(product_catalog) >= 2 else "",
        'thirdCategory': product_catalog[2] if len(product_catalog) >= 3 else "",
        'fourthCategory': product_catalog[3] if len(product_catalog) >= 4 else "",
        'fifthCategory': product_catalog[4] if len(product_catalog) >= 5 else "",
        'sixthCategory': product_catalog[5] if len(product_catalog) >= 6 else "",
        'seventhCategory': product_catalog[6] if len(product_catalog) >= 7 else "",
        'eigthCategory': product_catalog[7] if len(product_catalog) >= 8 else "",
    }

    print('完成' + str(product_id) + "销售数据爬取!")
    return product_summary

def send_mail(Spend_Time):
    my_sender = '395407702@qq.com'  # 发件人邮箱账号
    my_pass = 'fxtgbvgdvahubgec'  # 发件人邮箱密码
    my_user = '395407702@qq.com'  # 收件人邮箱账号，我这边发送给自己
    ret = True
    try:
        message = MIMEMultipart()
        message['From'] = Header("Python_ali_竞品日销", 'utf-8')
        message['To'] = Header("工作邮箱", 'utf-8')
        subject = '竞品销售数据'+'_'+str(datetime.date.today())
        message['Subject'] = Header(subject, 'utf-8')
        message.attach( MIMEText('竞品销售数据'+'_'+str(datetime.date.today())+'\n Spend Total Time:'+ Spend_Time +'mins', 'plain', 'utf-8'))
        # msg = MIMEText('热销竞品的销售数据', 'plain', 'utf-8')
        # msg['From'] = formataddr(["FromRunoob", my_sender])  # 括号里的对应发件人邮箱昵称、发件人邮箱账号
        # msg['To'] = formataddr(["FK", my_user])  # 括号里的对应收件人邮箱昵称、收件人邮箱账号
        # msg['Subject'] = file_name  # 邮件的主题，也可以说是标题

        # 构造附件1，传送当前目录下的 test.txt 文件
        # att1 = MIMEText(open('./ali_hotsales_history_Data/'+ file_name, 'rb').read(), 'base64', 'utf-8')
        # att1["Content-Type"] = 'application/octet-stream'
        # 这里的filename可以任意写，写什么名字，邮件中显示什么名字
        # att1["Content-Disposition"] = 'attachment; filename='+file_name
        # message.attach(att1)

        server = smtplib.SMTP_SSL("smtp.qq.com", 465)  # 发件人邮箱中的SMTP服务器，端口是25
        server.login(my_sender, my_pass)  # 括号中对应的是发件人邮箱账号、邮箱密码
        server.sendmail(my_sender, [my_user, ], message.as_string())  # 括号中对应的是发件人邮箱账号、收件人邮箱账号、发送邮件
        server.quit()  # 关闭连接
        print('邮件发送成功')
    except Exception as ex:  # 如果 try 中的语句没有执行，则会执行下面的 ret=False
        print(ex)
        ret = False
    return ret

def main(productIdlist):
    sessionNum=0
    session = getSession()
    while productIdlist:
        productId=productIdlist.pop()
        print("开始爬虫{}".format(productId),"等待爬虫产品数据为{}".format(len(productIdlist)))
        productId=fetch_content(productId, retry_num=1,session=session)
        if productId:
            productIdlist.append(productId)
            print("产品{}爬虫失败,返回消息列表".format(productId), "等待爬虫产品数据为{}".format(len(productIdlist)))
            time.sleep(10*random.randint(1,6))
        sessionNum+=1
        if sessionNum % 20 ==0:
            session=getSession()


if __name__ == '__main__':
    Start_Time = time.time()
    productIdlist = list(competingProductInfo.objects.values_list('productId', flat=True))  # 数据库读取产品ID


    # productIdlist=[
    #     32861516622,
    #     32887755558,
    #     32868334765,
    #     32871391355,
    #     32915408299,
    #     32733564246,
    #     32846789656,
    #     32849267839,
    #     32859764400,
    #     32840845274,
    #     32843789538,
    #     32864736748,
    #     32843605585,
    #     32863797905,
    #     32816975451,
    #     32847639499,
    #     32902184643,
    #     32820773751,
    #     32850430777,
    #     32882014811,
    #     32926972345,
    #     32878549408,
    #     32949930690,
    #     32747366518,
    #     32888500911,
    #     32853261329,
    #     32800289688,
    #     32886364691,
    #     32266526239,
    #     32911507267,
    #     32883659218,
    #     32704745486,
    #     32852674627,
    #     32790918877,
    #     32795045802,
    #     32817171139,
    #     32900933184,
    #     32850953889,
    #     32945529506,
    #     32839092568,
    #     32833487200,
    #     32859576018,
    #     32869858103,
    #     32895727295,
    #     32828028158,
    #     32848127846,
    #     32813636076,
    #     32925932830,
    #     32867892119,
    #     32848017688,
    #     32839171433,
    #     32760793423,
    #     32826101506,
    #     32664020995,
    #     32829496091,
    #     32845508167,
    #     32915022871,
    #     32751732383,
    #     32828878670,
    #     32896904742,
    #     32952122090,
    #     32804526347,
    #     32841181807,
    #     32857672627,
    #     32848061403,
    #     32919998920,
    #     32862359004,
    #     32889505763,
    #     32853306366,
    #     32925803607,
    #     32749484465,
    #     32950216089,
    #     32918805325,
    #     32949608631,
    #     32812828061,
    #     32945137990,
    #     32890240596,
    #     32789502955,
    #     32953212240,
    #     32928738822,
    #     32932396408,
    #     32851239357,
    #     32853720495,
    #     32774432159,
    #     32833213044,
    #     32829845598,
    #     32820707719,
    #     32855508176,
    #     32295902254,
    #     32827053222,
    #     32891739519,
    #     32887592676,
    #     32854977225,
    #     32864592760,
    #     32884157393,
    #     32891127758,
    #     32885764929,
    #     32865323130,
    #     32880849128,
    #     32855661832,
    #     32911249300,
    #     32852118560,
    #     32824957700,
    #     32854052487,
    #     32886344341,
    #     32828096748,
    #     32845151225,
    #     32816682431,
    #     32883804882,
    #     32857163457,
    #     32870660896,
    #     32855431697,
    #     32870157122,
    #     32912264547,
    #     32850756645,
    #     32885147034,
    #     32853772192,
    #     32843423340,
    #     32372852938,
    #     32859644224,
    #     32858069875,
    #     32950762819,
    #     32837902006,
    #     32947462212,
    #     32848879344,
    #     32870089230,
    #     32858057733,
    #     32915880222,
    #     32858892668,
    #     32825691393,
    #     32842950033,
    #     32880772544,
    #     32857299332,
    #     32880283519,
    #     32825235840,
    #     32880787967,
    #     32755282746,
    #     32671678524,
    #     32858886529,
    #     32856822714,
    #     32876393176,
    #     32846405322,
    #     32929637310,
    #     32887259432,
    #     32891959199,
    #     32817374784,
    #     32606880886,
    #     32833954053,
    #     32848874177,
    #     32748953754,
    #     32851755050,
    #     32848080025,
    #     32874390725,
    #     32877201716,
    #     32817363985,
    #     32898540163,
    #     32819533016,
    #     32859073655,
    #     32918244807,
    #     32891491832,
    #     32842851128,
    #     32881047128,
    #     32800800603,
    #     32895192931,
    #     2041728169,
    #     32659220462,
    #     32878632168,
    #     32894959348,
    #     32844574183,
    #     32840256965,
    #     32368401667,
    #     32879376827,
    #     32869040211,
    #     32872830064,
    #     32876304007,
    #     32891858822,
    #     32877994274,
    #     32847434470,
    #     32879624588,
    #     32840889575,
    #     32907204469,
    #     32857628201,
    #     32879025500,
    #     32764333240,
    #     32828678514,
    #     32818728578,
    #     32851380717,
    #     32846998396,
    #     32911508055,
    #     32818264428,
    #     32781128374,
    #     32825447855,
    #     32833526156,
    #     32839869324,
    #     32798846842,
    #     32842233954,
    #     32848650224,
    #     32837737563,
    #     32838351539,
    #     32831969772,
    #     32842943778,
    #     32841162277,
    #     32821434038,
    #     32820196241,
    #     32864086831,
    #     32822375185,
    #     32812972841,
    #     32813129587,
    #     32913508505,
    #     32838059999,
    #     32530101324,
    #     32722210397,
    #     32846139199,
    #     32807338535,
    #     32819191809,
    #     32890752914,
    #     32830211200,
    #     32839887859,
    #     32923447390,
    #     32871554461,
    #     32847254318,
    #     32919393215,
    #     32937471164,
    #     32844488075,
    #     32847357027,
    #     32890998545,
    #     32939643548,
    #     32922199199,
    #     32859971088,
    #     32891897500,
    #     32853794019,
    #     32224374698,
    #     32804050883,
    #     32866735110,
    #     32860008534,
    #     32889929492,
    #     32799825218,
    #     32925827012,
    #     32882094029,
    #     32925003100,
    #     32917732110,
    #     32952824122,
    #     32838536556,
    #     32913048833,
    #     32910792497,
    #     32861809050,
    #     32818862782,
    #     32860019929,
    #     32885640740,
    #     32921962511,
    #     32836641102,
    #     32865929087,
    #     32788359483,
    #     32820221218,
    #     32830767852,
    #     32864616299,
    #     32860043688,
    #     32617891644,
    #     32630635421,
    #     32851659822,
    #     32915346693,
    #     32862682724,
    #     32879869424,
    #     32859124402,
    #     32910677649,
    #     32893669954,
    #     32921492703,
    #     32828351414,
    #     32864585530,
    #     32852637919,
    #     32914094629,
    #     32436011536,
    #     32894475749,
    #     32888938759,
    #     32916573059,
    #     32881750151,
    #     32911018335,
    #     32805737313,
    #     32916697123,
    #     32867912739,
    #     32835350946,
    #     32915893273,
    #     32903070683,
    #     32915973243,
    #     32842547003,
    #     32901401067,
    #     32663968835,
    #     32910231934,
    #     32835772186,
    #     32923279347,
    #     32882730930,
    #     1993751586,
    #     32895337125,
    #     32869366319,
    #     32889106132,
    #     32893641733,
    #     32916006883,
    #     32896956819,
    #     32842824673,
    #     32914072041,
    #     32860603576,
    #     32881772996,
    #     32851002399,
    #     32857123325,
    #     32856343216,
    #     32917441947,
    #     32854893659,
    #     32945500301,
    #     32919141131,
    #     1998397238,
    #     32917603285,
    #     1734184546,
    #     32918220938,
    #     32930481363,
    #     32898537365,
    #     32890624519,
    #     32915078714,
    #     32858262603,
    #     32920280875,
    #     32851358988,
    #     32921090938,
    #     32940739321,
    #     32817177220,
    #     32816333859,
    #     32893311671,
    #     32899162885,
    #     32920019885,
    #     32956257242,
    #     32847694233,
    #     32842440119,
    #     32893477181,
    #     32845346634,
    #     32813662883,
    #     32952289783,
    #     32838786244,
    #     32869276986,
    #     32957733232,
    #     32792857018,
    #     2053375995,
    #     32920320615,
    #     32947365515,
    #     32823765184,
    #     32945387364,
    #     32796421899,
    #     32954154828,
    #     32961866314,
    #     32946793683,
    #     32846802182,
    #     32954966114,
    #     32871479347,
    #     32953088477,
    #     32920925675,
    #     32918529491,
    #     32843606484,
    #     32844273444,
    #     32872090453,
    #     32808029308,
    #     32893587861,
    #     32896778458,
    #     32747140047,
    #     32900983032,
    #     32809628383,
    #     32793309300,
    #     32908563491,
    #     32810821145,
    #     32936997556,
    #     32944357239,
    #     32881393757,
    #     32742079000,
    #     32949341886,
    #     32956884900,
    #     32951906922,
    #     32905777399,
    #     32838763215,
    #     32855581082,
    #     32808265296,
    #     32963923592,
    #     32868272601,
    #     32758580458,
    #     32960874940,
    #     32890148714,
    #     32805944997,
    #     32967521374,
    #     32950632136,
    #     32915956014,
    #     32740293109,
    #     32942053370,
    #     1.00001E+12,
    #     1.00001E+12,
    #     32922877224,
    #     32919308605,
    #     32955488741,
    #     32811933607,
    #     32816375486,
    #     32956372243,
    #     32932096101,
    #     32911877684,
    #     32955327671,
    #     32947972170,
    #     32816029500,
    #     32820047882,
    #     32979389494,
    #     32957672752,
    #     32835019753,
    #     32887811148,
    #     32911129016,
    #     32947041167,
    #     32915099519,
    #     32857581577,
    #     32895826904,
    #     32957798970,
    #     32955825628,
    #     32878546539,
    #     32894381822,
    #     32820090157,
    #     32655506530,
    #     32684477744,
    #     32815525549,
    #     32919682070,
    #     32809512549,
    #     32957363784,
    #     32948249910,
    #     32943214455,
    #     32954743739,
    #     32997199219,
    #     32975149664,
    #     32966627531,
    #     32954121117,
    #     33000998475,
    #     32988977853,
    #     32970096031,
    #     33002559348,
    #     32966978422,
    #     32970987616,
    #     32950715000,
    #     32965947250,
    #     32964907123,
    #     32956753493,
    #     32982649266,
    #     32957173074,
    #     32985227564,
    #     32910563787,
    #     32983129305,
    #     32967475646,
    #     32956202401,
    #     32947791238,
    #     32970303437,
    #     32953735179,
    #     32974452126,
    #     32999296248,
    #     32951572829,
    #     32977905673,
    #     32958831842,
    #     32924050937,
    #     32949204501,
    #     32971383574,
    #     32930424839,
    #     32973553999,
    #     32895062088,
    #     32968558789,
    #     32919478431,
    #     33000055523,
    #     32976506048,
    #     32999900789,
    #     32973629909,
    #     32987628883,
    #     32978735163,
    #     33000711835,
    #     32958905619,
    #     32928351035,
    #     32955117178,
    #     32880744665,
    #     32999646490,
    #     33008900702,
    #     32964539979,
    #     33004586655,
    #     32949001254,
    #     33002013899,
    #     33007256195,
    #     32914530125,
    #     32958255294,
    #     32965521672,
    #     32884783944,
    #     32960743184,
    #     32964701305,
    #     32959861025,
    #     32953710077,
    #     32979201404,
    #     33005699280,
    #     32862143697,
    #     32965834206,
    #     32960073406,
    #     32967996034,
    #     32966507245,
    #     32975340176,
    #     32974389966,
    #     32865350574,
    #     32968548652,
    #     32968670618,
    #     32851850223,
    #     32971139389,
    #     32965638154,
    #     32948308112,
    #     32966623874,
    #     32977094030,
    #     32957177580,
    #     32957169525,
    #     32974989918,
    #     32855214352,
    #     32969389591,
    #     32967647980,
    #     32891873513,
    #     32970623225,
    #     33000896196,
    #     32984755708,
    #     32967175330,
    #     32978364011,
    #     33000487439,
    #     32802228205,
    #     32984874980,
    #     33018791772,
    #     32963381810,
    #     32965629453,
    #     32993425187,
    #     32995801742,
    #     32992090646,
    #     32970701558,
    #     32951871528,
    #     32969444395,
    #     32863841192,
    #     32977459885,
    #     32966661365,
    #     33006015150,
    #     32974386124,
    #     32971306449,
    #     32983305471,
    #     32967060735,
    #     32950328217,
    #     33005471817,
    #     32893939303,
    #     32956565975,
    #     32968142459,
    #     33006284385,
    #     32931005654,
    #     32962883226,
    #     32970633733,
    #     32971421089,
    #     32942434685,
    #     33000233216,
    #     33010123233,
    #     32963366142,
    #     32983660018,
    #     32970148494,
    #     32988045731,
    #     32980089963,
    #     32967582488,
    #     32975645274,
    #     32969940687,
    #     32946218130,
    #     32918302452,
    #     32965758374,
    #     32861407801,
    #     33009811045,
    #     32989242181,
    #     32970766430,
    #     32918529159,
    #     32998198356,
    #     32970058608,
    #     32974464520,
    #     32918516187,
    #     32996706741,
    #     32989298383,
    #     32956755768,
    #     33000115439,
    #     32875946023,
    #     33003246285,
    #     32962380220,
    #     32970882187,
    #     32963305435,
    #     32980086390,
    #     32864254622,
    #     32972738304,
    #     32979369586,
    #     32855328792,
    #     32917497655,
    #     32951282508,
    #     32968064942,
    #     32977040125,
    #     32973675656,
    #     32985466165,
    #     32784867902,
    #     32978050801,
    #     32983418433,
    #     32917642484,
    #     32970059194,
    #     32972706957,
    #     32953009705,
    #     32980501261,
    #     32964408880,
    #     32962437822,
    #     32970413016,
    #     32960680856,
    #     32996527344,
    #     32805091283,
    #     33002448672,
    #     32977211298,
    #     32949494823,
    #     32980814707,
    #     32946002057,
    #     32998776616,
    #     32959221734,
    #     32960637394,
    #     1.00001E+12,
    #     32963609855,
    #     33009737609,
    #     32933614620,
    #     32845880100,
    #     33011207931,
    #     32989781556,
    #     32990467594,
    #     32522788024,
    #     33011444789,
    #     33004096972,
    #     32933035672,
    #     32911443990,
    #     32975445811,
    #     32995008971,
    #     32989753995,
    #     32999737653,
    #     32989591209,
    #     32970047910,
    #     33015646344,
    #     33017810953,
    #     32996794754,
    #     32999670840,
    #     32839275616,
    #     32920542429,
    #     32919985667,
    #     32842963262,
    #     33006954869,
    #     32869014713,
    #     33010948514,
    #     32832290043,
    #     32997894948,
    #     32977288059,
    #     32990781447,
    #     32914676552,
    #     33008844718,
    #     32985395034,
    #     32984099291,
    #     32949165805,
    #     33006532695,
    #     33004992291,
    #     32995999915,
    #     32857700100,
    #     32925751225,
    #     32968414809,
    #     32991172268,
    #     32920019231,
    #     32983124385,
    #     33020698743,
    #     32919155496,
    #     32948642096,
    #     32820185996,
    #     32904191885,
    #     32932151355,
    #     32962124542,
    #     32966040263,
    #     32965992179,
    #     33021805402,
    #     32960263069,
    #     32980485927,
    #     32985607216,
    #     32977809128,
    #     32878708744,
    #     32988006857,
    #     32965467076,
    #     33018724914,
    #     33019427893,
    #     32983293075,
    #     32960006857,
    #     32983267306,
    #     32960206856,
    #     32900900139,
    #     32960683267,
    #     32978167335,
    #     32822905366,
    #     33019886288,
    #     32975338969,
    #     32951294435,
    #     1.00001E+12,
    #     33012035105,
    #     32926454600,
    #     32984019175,
    #     33007531324,
    #     33010869217,
    #     33001361744,
    #     32968664505,
    #     32984591486,
    #     32957238682,
    #     32898237804,
    #     32918021060,
    #     32996314296,
    #     32991581078,
    #     33000993707,
    #     33011535887,
    #     32953044072,
    #     32966957041,
    #     32986303169,
    #     33001225888,
    #     32988608089,
    #     33014928441,
    #     33020243886,
    #     32961464126,
    #     33014018715,
    #     32980617398,
    #     32846168950,
    #     33018491176,
    #     32838036386,
    #     32835007804,
    #     33008019275,
    #     32887602632,
    #     33012101487,
    #     33003969928,
    #     32770103784,
    #     32962411331,
    #     32991869615,
    #     33019171496,
    #     32791035424,
    #     32965351247,
    #     33005744139,
    #     33017183400,
    #     33002493262,
    #     32956893551,
    #     32915201982,
    #     32973246105,
    #     32981241622,
    #     32975512142,
    #     32997114137,
    #     32960645329,
    #     32986211829,
    #     32967094275,
    #     32959224157,
    #     32993078918,
    #     33001285906,
    #     32967007091,
    #     32998156678,
    #     33004676362,
    #     32968646473,
    #     33008568088,
    #     32853385786,
    #     33018314246,
    #     32934703108,
    #     33011692709,
    #     33016078079,
    #     33018443086,
    #     32814452519,
    #     33020153138,
    #     32972508321,
    #     32954242779,
    #     32839919612,
    #     32979627108,
    #     32817164732,
    #     32964518992,
    #     32966415184,
    #     32955096863,
    #     32963720133,
    #     32876273038,
    #     32989515400,
    #     32971147106,
    #     32657394755,
    #     32995662052,
    #     32994681112,
    #     32990838245,
    #     32856620615,
    #     32962635850,
    #     33021132377,
    #     32974464130,
    #     32972451780,
    #     32867608857,
    #     32669590025,
    #     32954437537,
    #     32663856389,
    #     32998135373,
    #     32973487830,
    #     32939510593,
    #     32982179649,
    #     32976951201,
    #     32949218007,
    #     33003553325,
    #     32952692648,
    #     32997369424,
    #     32961919954,
    #     32992245984,
    #     32844765677,
    #     32790311253,
    #     32963656574,
    #     32981217458,
    #     32982431686,
    #     32735065162,
    #     32953067218,
    #     32726515444,
    #     32978209766,
    #     32964147739,
    #     32962431047,
    #     32989990076,
    #     32933047089,
    #     32966395462,
    #     32979361595,
    #     32988998342,
    #     32960174799,
    #     32970011005,
    #     32919785765,
    #     32980090169,
    #     32973174791,
    #     32960335499,
    #     32941744885,
    #     32860503865,
    #     32975440857,
    #     32964958759,
    #     32980045221,
    #     32974438633,
    #     32959200530,
    #     32925823855,
    #     32958783695,
    #     32955700629,
    #     32982494988,
    #     32947477556,
    #     32846249551,
    #     32978058669,
    #     32981378482,
    #     32971110513,
    #     32920837951,
    #     32965108362,
    #     32979437166,
    #     32970299355,
    #     32955332838,
    #     32958314250,
    #     32989568490,
    #     32950445171,
    #     32970589225,
    #     32983161029,
    #     32952772535,
    #     32963258925,
    #     32974466028,
    #     32977819930,
    #     32948585239,
    #     32969051583,
    #     32903537934,
    #     32979772601,
    #     32707771948,
    #     32967653877,
    #     32991563567,
    #     32920596539,
    #     32954903025,
    #     32952369216,
    #     33007497309,
    #     32983575368,
    #     33013814635,
    #     32953562337,
    #     33002872416,
    #     1.00001E+12,
    #     33016603930,
    #     32797141803,
    #     32975102039,
    #     32905506472,
    #     32972577252,
    #     32993186823,
    #     32954935366,
    #     32968560860,
    #     33010672940,
    #     32993344571,
    #     32973069928,
    #     32990593755,
    #     32958852491,
    #     32831708285,
    #     32877174717,
    #     32974826110,
    #     32971482582,
    #     32950378315,
    #     32918067020,
    #     32960980000,
    #     33005479404,
    #     32967031585,
    #     33003995872,
    #     33019939153,
    #     32994323306,
    #     32957188161,
    #     32960165417,
    #     32993707805,
    #     32999247168,
    #     32985756160,
    #     33004137486,
    #     32966820408,
    #     32967704836,
    #     33007338519,
    #     32763468254,
    #     32885680549,
    #     32982507066,
    #     33002545523,
    #     32921619100,
    #     33004435227,
    #     32967126917,
    #     33011180990,
    #     32854268965,
    #     33010684820,
    #     32954191079,
    #     33020215345,
    #     33006271385,
    #     32994376189,
    #     32978523722,
    #     32668616091,
    #     32297450489,
    #     32964441895,
    #     33000404379,
    #     33004539090,
    #     32982272157,
    #     33012844228,
    #     32960105230,
    #     32974436565,
    #     32914119249,
    #     33011782266,
    #     32940615775,
    #     32983391840,
    #     32999162353,
    #     32897822119,
    #     32947957389,
    #     32986515270,
    #     32933746869,
    #     33007174916,
    #     33005961676,
    #     33013314384,
    #     32866957917,
    #     32998315145,
    #     33025359227,
    #     33016571299,
    #     32872447184,
    #     32971407554,
    #     32966629353,
    #     32999128671,
    #     32997887074,
    #     33016835358,
    #     32954303163,
    #     33023464637,
    #     32869018727,
    #     33012750312,
    #     33007676883,
    #     32866541775,
    #     32979778161,
    #     33023022497,
    #     32993489453,
    #     32686785554,
    #     32916024348,
    #     32856905490,
    #     33033126309,
    #     32966423344,
    #     32944601772,
    #     32997815114,
    #     33013168835,
    #     32852366953,
    #     32997268918,
    #     32947193651,
    #     32967976074,
    #     33014866769,
    #     32952714552,
    #     32996676464,
    #     33012844233,
    #     33026373557,
    #     33010423320,
    #     32989152949,
    #     32961318363,
    #     32967056783,
    #     32971757124,
    #     32991865715,
    #     32920990974,
    #     32989817685,
    #     32891059122,
    #     32984591744,
    #     32950581244,
    #     32999191604,
    #     32971046858,
    #     32956617383,
    #     32965738170,
    #     32962339407,
    #     32996352292,
    #     32990038153,
    #     32980009801,
    #     32976262381,
    #     32983051296,
    #     32963201883,
    #     33014036927,
    #     33007813737,
    #     32925584379,
    #     32984094761,
    #     32882861083,
    #     1.00001E+12,
    #     32956590179,
    #     32956103016,
    #     32964325190,
    #     32961752601,
    #     32969266186,
    #     32942875604,
    #     32883974035,
    #     32967611330,
    #     32880559763,
    #     32960084695,
    #     32919428388,
    #     32945292005,
    #     33015435197,
    #     32952136348,
    #     32848550633,
    #     32919317088,
    #     32895719817,
    #     32961518982,
    #     32949650620,
    #     32854595384,
    #     32858550493,
    #     32944586771,
    #     32957021675,
    #     32963809024,
    #     32920564627,
    #     32975517257,
    #     32983091234,
    #     32959634687,
    #     32963207220,
    #     32974828610,
    #     32946719184,
    #     32972131264,
    #     32952171625,
    #     32940014433,
    #     32859791716,
    #     32961957747,
    #     32947939190,
    #     32818790880,
    #     32965487092,
    #     32953696932,
    #     32966839541,
    #     32971278106,
    #     32919131617,
    #     32991184603,
    #     32955855689,
    #     32948241656,
    #     32872847877,
    #     32888688482,
    #     32949751692,
    #     32967651797,
    #     32955736807,
    #     32964680386,
    #     32955476554,
    #     32964598548,
    #     32888929646,
    #     32960100993,
    #     32980172122,
    #     32871362940,
    #     32966451205,
    #     32963244091,
    #     32772422277,
    #     32966161919,
    #     32958456839,
    #     32972299044,
    #     32893770830,
    #     32965666774,
    #     32965500440,
    #     32951998766,
    #     32966891939,
    #     32964618646,
    #     32950869877,
    #     32957714846,
    #     32860003087,
    #     32924158796,
    #     32924287663,
    #     32961520336,
    #     32965925604,
    #     32964863267,
    #     32989791804,
    #     32830129548,
    #     33004746813,
    #     33008963620,
    #     32959064801,
    #     32984184874,
    #     32952717407,
    #     32967209607,
    #     32957068984,
    #     32992896434,
    #     32972617718,
    #     32922843599,
    #     32972162135,
    #     32972513421,
    #     33006914478,
    #     32965211625,
    #     32977108700,
    #     32877826038,
    #     33015104059,
    #     33014774526,
    #     32975104690,
    #     32947474940,
    #     32945312468,
    #     32978879601,
    #     32964328009,
    #     32646759564,
    #     32989752717,
    #     32791147226,
    #     32982097926,
    #     32969737536,
    #     32967039754,
    #     32949586233,
    #     32966030958,
    #     32972829229,
    #     32980954296,
    #     32961513072,
    #     32856341711,
    #     32977214301,
    #     32986621787,
    #     32946000736,
    #     32968614829,
    #     32921192636,
    #     32967865015,
    #     32966543361,
    #     1.00001E+12,
    #     32987742356,
    #     32891356358,
    #     32971447179,
    #     32908281538,
    #     32891187267,
    #     32971163591,
    #     32985243771,
    #     32955573981,
    #     32982556131,
    #     32991648194,
    #     32965039863,
    #     32995822208,
    #     32970436880,
    #     33007986020,
    #     32980094291,
    #     33023078634,
    #     32974677050,
    #     32995475769,
    #     32976856887,
    #     32967714656,
    #     32988731222,
    #     32949654141,
    #     32848054057,
    #     32976956030,
    #     33012569206,
    #     32925767078,
    #     32961593124,
    #     32982490791,
    #     32962636314,
    #     32971655209,
    #     32817326598,
    #     32950162914,
    #     32991262679,
    #     32960820116,
    #     32956937197,
    #     32964102144,
    #     32994470084,
    #     32985915082,
    #     32962729476,
    #     32922915271,
    #     32965678100,
    #     32960830443,
    #     32991801176,
    #     32597418263,
    #     32913803495,
    #     32955173052,
    #     32965595600,
    #     32978705709,
    #     32974887338,
    #     32981149905,
    #     32970277639,
    #     32883107861,
    #     32910709115,
    #     32964488241,
    #     32967627871,
    #     32951294463,
    #     32979883174,
    #     32965955857,
    #     32987804832,
    #     32970871623,
    #     32912807588,
    #     32948566658,
    #     32957219146,
    #     32964376124,
    #     32966439290,
    #     32489782530,
    #     32952183906,
    #     32903424863,
    #     32970953687,
    #     32834380573,
    #     32820609172,
    #     32601027783,
    #     32859499485,
    #     32968595367,
    #     32966209861,
    #     32992701249,
    #     32994298952,
    #     33003687906,
    #     33010406526,
    #     32947740448,
    #     32374671532,
    #     1.00001E+12,
    #     32957754424,
    #     33007306986,
    #     32957070467,
    #     33021973204,
    #     32965395807,
    #     32974157339,
    #     33005643504,
    #     32988560675,
    #     33003907781,
    #     32978257432,
    #     33009008041,
    #     32998463738,
    #     32965102395,
    #     32997199887,
    #     32989334355,
    #     33016830212,
    #     32990120625,
    #     32920915514,
    #     32956542469,
    #     32968111773,
    #     32982685791,
    #     32962937701,
    #     32975511800,
    #     32991006922,
    #     32833352227,
    #     32960087839,
    #     33007514951,
    #     33002926127,
    #     32994156374,
    #     32825050039,
    #     32953320909,
    #     33007001635,
    #     32871523691,
    #     32971335091,
    #     32857670239,
    #     32956977486,
    #     32866547894,
    #     32996093332,
    #     32889688309,
    #     32979425922,
    #     32817158452,
    #     32970099326,
    #     32991581636,
    #     32968891159,
    #     32897649783,
    #     32956935046,
    #     32973327188,
    #     33001346975,
    #     32957252568,
    #     33009712164,
    #     33002538687,
    #     32998174602,
    #     33002422389,
    #     32981047462,
    #     33002162409,
    #     32974705896,
    #     32986556604,
    #     32992076821,
    #     32966991761,
    #     32985738075,
    #     32770234261,
    #     32988718904,
    #     32957562299,
    #     32923045386,
    #     32895921650,
    #     32815162030,
    #     32846908769,
    #     32966940818,
    #     32960715560,
    # ]
    main(productIdlist)
    End_Time = time.time()
    Spend_Time = str(round((End_Time - Start_Time) / 60, 2))
    print('结束')
    send_mail(Spend_Time)